-- Table: public.login_user

CREATE TABLE IF NOT EXISTS public.login_user
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint,
    display_name character varying(100) COLLATE pg_catalog."default",
    email character varying(200) COLLATE pg_catalog."default",
    enable boolean,
    password character varying(255) COLLATE pg_catalog."default",
    username character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT login_user_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.login_user
    OWNER to admin;

COMMENT ON COLUMN public.login_user.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.login_user.display_name
    IS 'Display name';

COMMENT ON COLUMN public.login_user.email
    IS 'Email';

COMMENT ON COLUMN public.login_user.enable
    IS 'Indicates whether the account is enable';

COMMENT ON COLUMN public.login_user.password
    IS 'Password';

COMMENT ON COLUMN public.login_user.username
    IS 'Username';

-- Table: public.role

CREATE TABLE IF NOT EXISTS public.role
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint NOT NULL,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint NOT NULL,
    code character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(400) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.role
    OWNER to admin;

COMMENT ON COLUMN public.role.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.role.code
    IS 'Role code';

COMMENT ON COLUMN public.role.description
    IS 'Role description';

-- Table: public.login_user_role

CREATE TABLE IF NOT EXISTS public.login_user_role
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint NOT NULL,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint NOT NULL,
    login_user_id bigint NOT NULL,
    role_id bigint NOT NULL,
    CONSTRAINT login_user_role_pkey PRIMARY KEY (id),
    CONSTRAINT fkck6ht4l3dqayr0ka5crk2c26r FOREIGN KEY (login_user_id)
        REFERENCES public.login_user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.login_user_role
    OWNER to admin;

COMMENT ON COLUMN public.login_user_role.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.login_user_role.login_user_id
    IS 'The id of login user who own the role';

COMMENT ON COLUMN public.login_user_role.role_id
    IS 'The id of role';
	
-- Table: public.todo

CREATE TABLE IF NOT EXISTS public.todo
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint NOT NULL,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint NOT NULL,
    category character varying(10) COLLATE pg_catalog."default",
    completed_at timestamp(6) without time zone,
    content character varying(255) COLLATE pg_catalog."default",
    deadline_at timestamp(6) without time zone,
    priority character varying(10) COLLATE pg_catalog."default",
    required_all_completed boolean NOT NULL,
    sent_at timestamp(6) without time zone NOT NULL,
    title character varying(50) COLLATE pg_catalog."default" NOT NULL,
    type character varying(10) COLLATE pg_catalog."default",
    owner_id bigint NOT NULL,
    role_id bigint,
    CONSTRAINT todo_pkey PRIMARY KEY (id),
    CONSTRAINT todo_category_check CHECK (category::text = ANY (ARRAY['GENERAL'::character varying, 'INTERNAL'::character varying, 'EXTERNAL'::character varying, 'MEETING'::character varying, 'FOLLOWUP'::character varying, 'OTHER'::character varying]::text[])),
    CONSTRAINT todo_priority_check CHECK (priority::text = ANY (ARRAY['NA'::character varying, 'LOW'::character varying, 'MEDIUM'::character varying, 'HIGH'::character varying, 'URGENT'::character varying]::text[])),
    CONSTRAINT todo_type_check CHECK (type::text = ANY (ARRAY['ALL'::character varying, 'ROLE'::character varying, 'USER'::character varying]::text[]))
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.todo
    OWNER to admin;

COMMENT ON COLUMN public.todo.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.todo.category
    IS 'Category of todo';

COMMENT ON COLUMN public.todo.completed_at
    IS 'Owner has marked this todo as completed at';

COMMENT ON COLUMN public.todo.content
    IS 'Content';

COMMENT ON COLUMN public.todo.deadline_at
    IS 'Deadline of the todo';

COMMENT ON COLUMN public.todo.priority
    IS 'Priority of todo';

COMMENT ON COLUMN public.todo.required_all_completed
    IS 'All user need to be marked completed to update this todo to completed';

COMMENT ON COLUMN public.todo.sent_at
    IS 'Sent at';

COMMENT ON COLUMN public.todo.title
    IS 'Title of the todo item';

COMMENT ON COLUMN public.todo.type
    IS 'Type of todo [ALL, ROLE, USER]';

COMMENT ON COLUMN public.todo.owner_id
    IS 'The id of todo owner';

COMMENT ON COLUMN public.todo.role_id
    IS 'The id of role';

-- Table: public.todo_comment

CREATE TABLE IF NOT EXISTS public.todo_comment
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint NOT NULL,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint NOT NULL,
    comment character varying(255) COLLATE pg_catalog."default",
    commented_at timestamp(6) without time zone NOT NULL,
    login_user_id bigint NOT NULL,
    todo_id bigint NOT NULL,
    CONSTRAINT todo_comment_pkey PRIMARY KEY (id),
    CONSTRAINT fk6p7tpnyggy4tkjfbd1eelrd1w FOREIGN KEY (todo_id)
        REFERENCES public.todo (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.todo_comment
    OWNER to admin;

COMMENT ON COLUMN public.todo_comment.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.todo_comment.comment
    IS 'Comment on todo';

COMMENT ON COLUMN public.todo_comment.commented_at
    IS 'Commented at';

COMMENT ON COLUMN public.todo_comment.login_user_id
    IS 'The id of login user';

COMMENT ON COLUMN public.todo_comment.todo_id
    IS 'The id of todo';

-- Table: public.todo_user

CREATE TABLE IF NOT EXISTS public.todo_user
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    active boolean,
    created_at timestamp(6) without time zone NOT NULL,
    created_by bigint NOT NULL,
    modified_at timestamp(6) without time zone NOT NULL,
    modified_by bigint NOT NULL,
    completed_at timestamp(6) without time zone,
    read_at timestamp(6) without time zone,
    login_user_id bigint,
    todo_id bigint NOT NULL,
    CONSTRAINT todo_user_pkey PRIMARY KEY (id),
    CONSTRAINT fkj5d1ewowdan5cd26u8fgo6yxv FOREIGN KEY (todo_id)
        REFERENCES public.todo (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.todo_user
    OWNER to admin;

COMMENT ON COLUMN public.todo_user.active
    IS 'Record is active or not';

COMMENT ON COLUMN public.todo_user.completed_at
    IS 'User has marked this todo as completed at';

COMMENT ON COLUMN public.todo_user.read_at
    IS 'User has read this todo at';

COMMENT ON COLUMN public.todo_user.login_user_id
    IS 'The id of login user';

COMMENT ON COLUMN public.todo_user.todo_id
    IS 'The id of todo';

-- Login User (default admin account)
INSERT INTO login_user (username, password, display_name, active, created_by, created_at, modified_by, modified_at, enable, email) VALUES ('admin', '$2a$10$tXFri/tGXJGOjQ1Ido7AMexXXIrzW8AaKSYtc1myb9ywQsz0UXySe', 'Administrator', true, 1, NOW(), 1, NOW(), true, 'admin@yopmail.com');
-- Role (default admin role)
INSERT INTO role (code, description, active, created_by, created_at, modified_by, modified_at) VALUES ('ADMIN', 'Administrator', true, 1, NOW(), 1, NOW());
-- Login User Role (default assign all role to user admin)
INSERT INTO login_user_role (login_user_id, role_id, active, created_by, created_at, modified_by, modified_at) SELECT (SELECT id FROM login_user WHERE username ='admin'), id, true, 1, NOW(), 1, NOW() FROM role;


